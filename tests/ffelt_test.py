import unittest
from binext import ffelt

class testAdd (unittest.TestCase):

    def test_sum(self):
        sums16={
            (None, None): None, (1, 1): None, (13, 13): None, (15, 15): None,
            (1, None): 1, (None, 1): 1,
            (13, None): 13, (None, 13): 13,
            (15, None): 0, (None, 15): 0,
            ( 0 , 1 ): 4 ,( 0 , 4 ): 1 ,( 0 , 6 ): 13 ,( 0 , 14 ): 3 ,
            ( 1 , 1 ): None ,( 1 , 2 ): 5 ,( 1 , 6 ): 11 ,( 1 , 8 ): 10 ,( 1 , 9 ): 3 ,
            ( 2 , 3 ): 6 ,( 2 , 11 ): 9 ,( 2 , 13 ): 14 ,( 2 , 15 ): 8 ,
            ( 3 , 0 ): 14 ,( 3 , 6 ): 2 ,( 3 , 10 ): 12 ,
            ( 4 , 0 ): 1 ,( 4 , 2 ): 10 ,( 4 , 6 ): 12 ,( 4 , 9 ): 14 ,( 4 , 10 ): 2 ,( 4 , 11 ): 13 ,
            ( 5 , 1 ): 2 ,( 5 , 9 ): 6 ,( 5 , 10 ): 0 ,( 5 , 13 ): 7 ,( 5 , 14 ): 12 ,
            ( 6 , 1 ): 11 ,( 6 , 8 ): 14 ,( 6 , 9 ): 5 ,( 6 , 14 ): 8 ,
            ( 7 , 9 ): 0 ,( 7 , 11 ): 8 ,( 7 , 14 ): 1 ,( 7 , 15 ): 9 ,( 7 , 16 ): 14 ,
            ( 8 , 2 ): 0 ,( 8 , 11 ): 7 ,( 8 , 15 ): 2 ,
            ( 9 , 2 ): 11 ,( 9 , 8 ): 12 ,( 9 , 12 ): 8 ,( 9 , 13 ): 10 ,
            ( 10 , 1 ): 8 ,( 10 , 3 ): 12 ,( 10 , 5 ): 0 ,( 10 , 7 ): 6 ,( 10 , 10 ): None ,( 10 , 13 ): 9 ,
            ( 11 , 5 ): 3 ,( 11 , 6 ): 1 ,( 11 , 10 ): 14 ,( 11 , 14 ): 10 ,
            ( 12 , 9 ): 8 ,( 12 , 12 ): None ,( 12 , 14 ): 5 ,
            ( 13 , 4 ): 11 ,( 13 , 5 ): 7 ,( 13 , 14 ): 2 ,( 13 , 15 ): 6 ,
            ( 14 , 0 ): 3 ,( 14 , 11 ): 10 ,( 14 , 13 ): 2 ,( 14 , 15 ): 3 ,( 14 , 16 ): 7 ,
            ( 15 , 3 ): 14 ,( 15 , 5 ): 10 ,( 15 , 7 ): 9 ,( 15 , 9 ): 7 ,( 15 , 11 ): 12 ,( 15 , 14 ): 3 ,
            ( 16 , 2 ): 5 ,( 16 , 3 ): 9 ,( 16 , 7 ): 14 ,( 16 , 10 ): 8 ,( 16 , 12 ): 13 ,( 16 , 13 ): 12 ,
            ( 16 , 14 ): 7 ,
            }

        for a,b in sums16:
            gfa=ffelt(a,16)
            gfb=ffelt(b,16)
            gfc=ffelt(sums16[(a,b)],16)
            self.assertEqual(gfa + gfb, gfc,
                             str(gfa)+"+"+str(gfb)+"should be"+str(gfc)
                             )

    def test_vec(self):
        vecs16={
            0 : [0, 0, 0, 1] ,
            1 : [0, 0, 1, 0] ,
            2 : [0, 1, 0, 0] ,
            3 : [1, 0, 0, 0] ,
            4 : [0, 0, 1, 1] ,
            5 : [0, 1, 1, 0] ,
            6 : [1, 1, 0, 0] ,
            7 : [1, 0, 1, 1] ,
            8 : [0, 1, 0, 1] ,
            9 : [1, 0, 1, 0] ,
            10 : [0, 1, 1, 1] ,
            11 : [1, 1, 1, 0] ,
            12 : [1, 1, 1, 1] ,
            13 : [1, 1, 0, 1] ,
            14 : [1, 0, 0, 1] ,
            15 : [0, 0, 0, 1] ,
            16 : [0, 0, 1, 0] ,
        }

        for a in vecs16:
            gfa=ffelt(a,16)
            self.assertEqual(gfa.vec(), vecs16[a],
                             str(gfa)+".vec() should be"+str(vecs16[a])
                             )




if __name__ == '__main__':
    unittest.main()
